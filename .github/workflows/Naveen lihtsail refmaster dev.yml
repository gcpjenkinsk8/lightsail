name: Naveen lightsail Refmaster Pipeline

on:
  workflow_dispatch:
    inputs:
      TicketNumber:
       description: 'Jira Ticket'     
       required: true

env:
  SOURCE_FOLDER: "C:/DeploymentFiles/VersionFolder"
  DESTINATION_FOLDER: "C:/DeploymentFiles/ReleaseFolder"
  DESTINATION_FOLDER_CONFIG: "C:/DeploymentFiles/ReleaseFolder/Web.config"
  TicketNumber: '${{ github.event.inputs.Ticketnumber }}'
  

jobs:
  build-publish:
    runs-on: RefDeployDev 

    defaults:
      run:
        working-directory: ./Main-build
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      working-directory:  ${{ github.workspace }}/Main-build
      GITHUB_TOKEN: ${{ secrets.YOUR_ACCESS_TOKEN }}
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4
      
    - name: Cache NuGet packages
      uses: actions/cache@v2
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: nuget-
        
    - name: Setup the MSBuild
      uses: microsoft/setup-msbuild@v1.0.2
    
     
    - name: Clean the NuGet packages
      run: |
        nuget locals all -clear
      working-directory: ${{ github.workspace }}/Main-build
     
    
    - name: Restore the NuGet packages
      run: nuget restore ${{ github.workspace }}/Main-build
      working-directory:  ${{ github.workspace }}/Main-build
    
    - name: Restore the dependencies
      run: msbuild /restore 
      working-directory:  ${{ github.workspace }}/Main-build
    - name: Set Build Name
      id: set-build-name
      run: |
        $ticket_number = $env:INPUT_TicketNumber
        $current_time = Get-Date -Format "HHmmss"
        $build_name = "Build-${ticket_number}-$(Get-Date -Format 'yyyyMMdd')-${current_time}"
        Write-Host "Build name: $build_name"
        echo "::set-output name=BuildName::$build_name"
      env:
        INPUT_TicketNumber: ${{ github.event.inputs.TicketNumber }}

    - name: Build the Solution and make the artifact with NAME AS ${{ steps.set-build-name.outputs.BuildName }}
      run: |
        $publishPath = Join-Path -Path ${{ env.SOURCE_FOLDER }} -ChildPath ${{ steps.set-build-name.outputs.BuildName }}
        msbuild.exe /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl="$publishPath" ${{ github.workspace }}/Main-build


    # - name: Build the Solution and making the artifact This step may take time to complete
    #   run: |
    #     msbuild.exe /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl="../$SOURCE_FOLDER/${{ steps.set-build-name.outputs.BuildName }}" ${{ github.workspace }}/Main-build


    # - name: Copy artifact to C:\ on self-hosted server
    #   run: |
    #     $artifactPath = "${{ github.workspace }}/Main-build/${{ steps.set-build-name.outputs.BuildName }}"
    #     $destinationPath = "C:\DeploymentFiles\VersionFolder\"
    #     Copy-Item -Path $artifactPath -Destination $destinationPath -Recurse
 
