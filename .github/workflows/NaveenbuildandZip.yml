name: NaveenbuildandZip

on:
  workflow_dispatch:
    inputs:
      TicketNumber:
       description: 'Jira Ticket'     
       required: true

env:
  SOURCE_FOLDER: "C:/DeploymentFiles/VersionFolder"
  DESTINATION_FOLDER: "C:/DeploymentFiles/ReleaseFolder"
  TicketNumber: '${{ github.event.inputs.Ticketnumber }}'
  SERVER_PASS: ${{ secrets.REMOTE_PASSWORDGC }}

jobs:
  build-publish:
    runs-on: windows-latest  # Use the Windows runner
    defaults:
      run:
        working-directory: ./Main-build
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      working-directory:  ${{ github.workspace }}/Main-build
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      
    - name: Cache NuGet packages
      uses: actions/cache@v2
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: nuget-
        
    - name: Setup the MSBuild
      uses: microsoft/setup-msbuild@v1.0.2
     
    - name: Clean the NuGet packages
      run: nuget locals all -clear
      working-directory:  ${{ github.workspace }}/Main-build
    - name: Restore the NuGet packages
      run: nuget restore ${{ github.workspace }}/Main-build
      working-directory:  ${{ github.workspace }}/Main-build
    - name: Restore the dependencies
      run: msbuild /restore 
      working-directory:  ${{ github.workspace }}/Main-build

    - name: Build the Solution and making the artifact This step may take time to complete 
      run: |
        msbuild.exe /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl="../_build" ${{ github.workspace }}/Main-build
     

    - name: Set the artifact name to the build
      id: set-artifact-name
      run: |
        $ticket_number = $env:INPUT_TicketNumber
        $current_time = Get-Date -Format "HHmmss"
        $artifact_name = "Build-${ticket_number}-$(Get-Date -Format 'yyyyMMdd')-${current_time}"
        Write-Host "Artifact name: $artifact_name"
        #echo "ArtifactName=$artifact_name" >> $GITHUB_ENV
        echo "::set-output name=ArtifactName::$artifact_name"
       # echo "$artifact_name" > ${{ github.workspace }}/Main-build/artifact_name.txt
      shell: pwsh
      env:
        INPUT_TicketNumber: ${{ github.event.inputs.TicketNumber }}

    - name: Upload the artifact file
      id: upload-artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.set-artifact-name.outputs.ArtifactName }}
        path: Main-build/_build

    - name: Create a Folder abc for downloading the build file
      run: mkdir abc

    - name: Download the Artifact in the abc folder
      id: donloaded-artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ steps.set-artifact-name.outputs.ArtifactName }}
        path: ./abc 

    - name: Zip Artifact
      run: Compress-Archive -Path .\abc\* -DestinationPath "${{ steps.set-artifact-name.outputs.ArtifactName }}.zip"
   
    - name: Install sshpass dependency for ssh access
      run: |
        choco install -y openssh

    - name: Create SSH directory for storing known hosts
      run: mkdir C:\Users\runneradmin\.ssh

    - name: Update known_hosts file with the server IP to avoid fingerprint ask
      run: |
        $WINDOWS_SERVER_IP = "${{ secrets.REMOTE_HOSTGC }}"
        ssh-keyscan -t rsa $WINDOWS_SERVER_IP >> $env:USERPROFILE\.ssh\known_hosts

   # - name: Copy the latest files to version location
   #   run: |
    #    #scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=$env:USERPROFILE\.ssh\known_hosts "${{ github.workspace }}\${{ steps.set-artifact-name.outputs.ArtifactName }}.zip" "${{ secrets.REMOTE_ADMINGC }}:${{ secrets.SERVER_PASS }}@${{ secrets.REMOTE_HOSTGC }}:${{ env.SOURCE_FOLDER }}"
    #    scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=$env:USERPROFILE\.ssh\known_hosts "${{ github.workspace }}\${{ steps.set-artifact-name.outputs.ArtifactName }}.zip" "Administrator:akqR3XeigseYHlWxD$T8ZtpWu&T*BkJm@3.110.130.37:${{ env.SOURCE_FOLDER }}"

    - name: Copy PuTTY tools to working directory
      run: |
        mkdir putty
        cp putty/* putty/
    - name: Copy file to Windows server
      run: |
        # Replace these placeholders with actual values
        $sourceFile = "${{ steps.set-artifact-name.outputs.ArtifactName }}.zip"
        $destinationServer = "3.110.130.37"
        $destinationPath = "C:/DeploymentFiles/ReleaseFolder"
        $username = "Administrator"
        $password = "akqR3XeigseYHlWxD$T8ZtpWu&T*BkJm"
        putty\plink.exe -ssh $username@$destinationServer -pw $password "putty\pscp.exe -pw $password $sourceFile $username@$destinationServer:$destinationPath"
                  

  
   # - name: Copy the latest files to deployment location
     # run: |
     #   scp "${{ github.workspace }}\${{ steps.set-artifact-name.outputs.ArtifactName }}.zip" "${{ secrets.REMOTE_ADMINGC }}@${{ secrets.REMOTE_HOSTGC }}:${{ env.SOURCE_FOLDER }}"
  
